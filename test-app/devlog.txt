socket rooms - io.of(<namespace>)

//Broadcasting means sending a message to everyone else except for the socket that starts it.

var io = require('socket.io')(80);

io.on('connection', function (socket) {
  socket.broadcast.emit('user connected');
});


// add typings definition to node.js app for enabling intellisense suggestions

//node js logger

//open vs code using cmd - code .

//how to debug a node js app
1. https://www.youtube.com/watch?v=kqLRCoClfko
2.https://www.youtube.com/watch?v=egBJ0cd0GLM

//logger
//environment variables
//testing
//server monitoring
//session tracking


if the client had received the 'start-game' event and yet he decided to exit the gameroom, then in component
onDestroy() fire the 'exit-gameroom' event .

On server side , on 'exit-gameroom' , remove the player from playerlist and stop the game.

if player disconnects then remove the player from the player list and stop the game .


-------
TODO:
Need to only send the events to the registered players , currently it might send to all connected socket clients
irrespective of whether he is eligible or not .


This can be done through using socket rooms or namespaces where the eligible ones will be 
in a 'strict registered clients only' room which shall receive all the updates.


-----
TODO:
removing players from server player list must also notify the clients of the updated list,
this might need a player state event triggered system , where once a player is to be removed a 'removed-player'
event would be fired due to state change , calling for appropriates action .


-----

NOTES :
1. io.sockets.sockets[<socket id>]

2.
Each Socket in Socket.IO is identified by a random, unguessable, unique identifier Socket#id. For your convenience, each socket automatically joins a room identified by this id.

This makes it easy to broadcast messages to other sockets:

io.on('connection', function(socket){
  socket.on('say to someone', function(id, msg){
    socket.broadcast.to(id).emit('my message', msg);
  });
});

3.
You can call join to subscribe the socket to a given channel:

io.on('connection', function(socket){
  socket.join('some room');
});
And then simply use to or in (they are the same) when broadcasting or emitting:

io.to('some room').emit('some event');